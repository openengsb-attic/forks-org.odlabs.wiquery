~~ Quickstart tutorial

Quickstart

* In this tutorial ...

	You will learn how to start a new WickeXt project, how to build it and how to run it.
	
	WickeXt is based over the Wicket framework, a component and stateful web framework that makes objet oriented programming 
	for a web application a reality.
	
* If you have problems with this tutorial

	If you have any question or problem about this tutorial, do not hesitate to post a ticket at {{{http://n2.nabble.com/WickeXt---User-forum-f1346324.html} WickeXt user forum}}
	
* Tools needed

	To be able to follow this quick start properly, please use Maven 2 for quick project configuration
			
* First step: Let's create a Wicket project

	First of all, we will have to create a new Wicket project. To be able to do it in five minutes, let's use Maven 2 with Wicket
	maven archetypes.
	
** Create the project template
	
	Create a directory and name it "quickstart". In this directory, type this command line:
	
+-------------------------------+
mvn archetype:create -DarchetypeGroupId=org.apache.wicket -DarchetypeArtifactId=wicket-archetype-quickstart -DarchetypeVersion=1.4-m3 -DgroupId=org.odlabs -DartifactId=quickstart	
+-------------------------------+
	
	And let Maven's magic operating. At the end of Maven processing, your terminal should print:	

[quickstart-mvn-achretypes-ok.png] Yes it works !

	Check your directory structure. You should see this:
	
[quickstart-after-mvn-archetype.png] Directory structure

	!! Please remove all test source files contained in the test directory.

	Note: if you are using eclipse IDE, just type the command below to turn your project as an eclipse project:

+-------------------------------+
mvn eclipse:eclipse
+-------------------------------+
	
** Correct the template and configure it

	The Maven template seems to be a little bugged, therefore the project won't build due to Java errors :).
	
	To avoid that, browse your source code and remove the generics declaration at the top of the HomePage.java class:

[quickstart-remove-generics.png] Generics to remove

[quickstart-generics-removed.png] Grenerics removed

	Open the pom.xml file (this file contains all configuration needed for your project). Find the build section, and insert the following lines:

+-------------------------------+
<plugin> 
	<groupId>org.apache.maven.plugins</groupId> 
	<artifactId>maven-compiler-plugin</artifactId> 
	<configuration> 
		<source>1.5</source> 
		<target>1.5</target> 
	</configuration> 
</plugin>	
+-------------------------------+

** Run it

	Type the command below (this will run a Jetty server on the 8080 port, please be sure that this port is free):
	
+-------------------------------+	
mvn jetty:run
+-------------------------------+
	
	Finally, type localhost:8080/quickstart/ in your browser. You should see:
	
[quickstart-step1-success.png] Success
	
	Ok, now you are ready !
	
* WickeXt quickstart's example: A modal window component

	WickeXt contains a bunch of UI components using the jQuery UI framework, we will describe each one in another tutorial.
	
** Add a dependency to WickeXt

	As we do not have WickeXt installed in a public repository yet, you will have to install it locally (don't worry, it's 
	easy to do). Follow the steps below:
	
	* Download the WickeXt jar file
	
	* Type the following command: 
	
+-------------------------------+	
mvn install:install-file -Dfile=/your/path/to/wickext-0.9.jar -DgroupId=org.odlabs.wickext -DartifactId=wickext -Dversion=0.9 -Dpackaging=jar
+-------------------------------+

	* Now that WickeXt is installed in your local repository, add a dependency to your pom.xml file:
	
+-------------------------------+
<dependency>
	<groupId>org.odlabs.wickext</groupId>
	<artifactId>wickext</artifactId>
	<version>0.9</version>
</dependency>
+-------------------------------+

	* Type "mvn package" in your console. WickeXt is ready to be used

** Let's code an example !

	* Enable WickeXt

	Modify the WicketApplication class to be able to use WickeXt. The first way to use WickeXt is to extend the
	 WickextWebApplication class (we will see that this inheritance is not the only way to use WickeXt).
	
	With this inheritance, WickeXt configures the Wicket framework to manage each component's resource 
	(CSS, JavaScript, images etc).
	
	* Add a div node around the span element in HomePage.html, set its title to "Hello world !" and its wicket:id to "modal"
	
[quickstart-markup.png]

	* In the Java file "HomePage.java", just add the Window component to the page as below:

+-------------------------------+
Window window = new Window("modal");
add(window);
+-------------------------------+

	* Add the label into this window

+-------------------------------+
window.add(new Label("message", "If you see this message wicket is properly configured and running"));
+-------------------------------+

	* Note: to import the Window class:

+-------------------------------+
import org.objetdirect.wickext.ui.dialog.Window;
+-------------------------------+

	* ... and finally setup the window as auto opening:

+-------------------------------+
window.setAutoOpen(true);
+-------------------------------+

	* Here is the whole file:
	
+-------------------------------+
package org.odlabs;

import org.apache.wicket.PageParameters;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.WebPage;
import org.objetdirect.wickext.ui.dialog.Window;

public class HomePage extends WebPage {

	private static final long serialVersionUID = 1L;

    public HomePage(final PageParameters parameters) {
    	Window window = new Window("modal");
    	add(window);
    	window.add(new Label("message", "If you see this message wicket is properly configured and running"));
    	window.setAutoOpen(true);
    }
}
+-------------------------------+

	* Restart your Jetty server (mvn jetty:run), load the page. You should see this:
	
[quickstart-finish.png]

* Comments about this tutorial

	As you can see, WickeXt is not only a Java wrapper over a JavaScript library. It's really a framework with its programming
	model, its architecture and best practices.
	
	This example shows that:
	
** Resources linked to a component are managed by WickeXt

	Each component declares its linked resources and WickeXt imports them for you !
	
** It's non intrusive

	If you look at the generated JavaScript source code, it's only a statement applying a behavior to an HTML component.
	
** It's simple
	
	No polluting markup is added, no polluting Java source code is needed.

	

	
	
	